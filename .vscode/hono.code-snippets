{
	"hono_zod_param": {
		"prefix": "hnzdp",
		"body": [
			"export const zParam = z.object({});",
		],
		"description": "hono zod params"
	},
	"hono_zod_json": {
		"prefix": "hnzdj",
		"body": [
			"export const zJson = z.object({});",
		],
		"description": "hono zod json"
	},
	"hono_req_param": {
		"prefix": "hnrqp",
		"body": [
			"const param = zParam.parse(c.req.param());",
		],
		"description": "hono request params"
	},
	"hono_req_json": {
		"prefix": "hnrqj",
		"body": [
			"const json = zJson.parse(await c.req.json());",
		],
		"description": "hono request json"
	},
	"hono_app": {
		"prefix": "hnapp",
		"body": [
			"import { OpenAPIHono } from \"@hono/zod-openapi\";",
			"",
			"const app = new OpenAPIHono();",
			"",
			"export default app;",
		],
		"description": "hono_app"
	},
	"hono-router-init": {
		"prefix": "hnri",
		"body": [
		  "import { OpenAPIHono } from '@hono/zod-openapi';",
		  "",
		  "const app = new OpenAPIHono();",
		  "",
		  "export default app;",
		  ""
		],
		"description": "hono-router-init"
	},
	"hono_route-post": {
		"prefix": "hnrpo",
		"body": [
		  "import { OpenAPIHono, createRoute, z } from \"@hono/zod-openapi\";",
		  "",
		  "export const zJson = z.object({});",
		  "",
		  "export const zRes = z.object({});",
		  "",
		  "const route = createRoute({",
		  "  path: \"\",",
		  "  tags: [\"\"],",
		  "  method: \"post\",",
		  "  summary: '',",
		  "  description: '',",
		  "  request: {",
		  "    body: {",
		  "      content: {",
		  "        \"application/json\": {",
		  "          schema: zJson,",
		  "          example: zJson.parse({}),",
		  "        },",
		  "      },",
		  "      required: true,",
		  "    },",
		  "  },",
		  "  responses: {",
		  "    200: {",
		  "      content: {",
		  "        \"application/json\": {",
		  "          schema: zRes,",
		  "        },",
		  "      },",
		  "      description: \"\",",
		  "    },",
		  "  },",
		  "  security: [{ Bearer: [] }],",
		  "});",
		  "",
		  "const app = new OpenAPIHono();",
		  "",
		  "app.use(route.getRoutingPath());",
		  "",
		  "export type EndpointType = typeof ep;",
		  "export const ep = app.openapi(route, async (c) => {",
		  "",
		  "  return c.json({});",
		  "});",
		  "",
		  "export default app;",
		  ""
		],
		"description": ""
	  },
	"hono_route-delete": {
		"prefix": "hnrd",
		"body": [
		  "import { OpenAPIHono, createRoute, z } from \"@hono/zod-openapi\";",
		  "",
		  "export const zJson = z.object({});",
		  "",
		  "export const zRes = z.object({});",
		  "",
		  "const route = createRoute({",
		  "  path: \"\",",
		  "  tags: [\"\"],",
		  "  method: \"delete\",",
		  "  summary: '',",
		  "  description: '',",
		  "  request: {",
		  "    body: {",
		  "      content: {",
		  "        \"application/json\": {",
		  "          schema: zJson,",
		  "          example: zJson.parse({}),",
		  "        },",
		  "      },",
		  "      required: true,",
		  "    },",
		  "  },",
		  "  responses: {",
		  "    200: {",
		  "      content: {",
		  "        \"application/json\": {",
		  "          schema: zRes,",
		  "        },",
		  "      },",
		  "      description: \"\",",
		  "    },",
		  "  },",
		  "  security: [{ Bearer: [] }],",
		  "});",
		  "",
		  "const app = new OpenAPIHono();",
		  "",
		  "app.use(route.getRoutingPath());",
		  "",
		  "export type EndpointType = typeof ep;",
		  "export const ep = app.openapi(route, async (c) => {",
		  "",
		  "  return c.json({});",
		  "});",
		  "",
		  "export default app;",
		  ""
		],
		"description": ""
	  },
	"hono_route-put": {
		"prefix": "hnrpu",
		"body": [
		  "import { OpenAPIHono, createRoute, z } from \"@hono/zod-openapi\";",
		  "",
		  "export const zJson = z.object({});",
		  "",
		  "export const zRes = z.object({});",
		  "",
		  "const route = createRoute({",
		  "  path: \"\",",
		  "  tags: [\"\"],",
		  "  method: \"put\",",
		  "  summary: '',",
		  "  description: '',",
		  "  request: {",
		  "    body: {",
		  "      content: {",
		  "        \"application/json\": {",
		  "          schema: zJson,",
		  "          example: zJson.parse({}),",
		  "        },",
		  "      },",
		  "      required: true,",
		  "    },",
		  "  },",
		  "  responses: {",
		  "    200: {",
		  "      content: {",
		  "        \"application/json\": {",
		  "          schema: zRes,",
		  "        },",
		  "      },",
		  "      description: \"\",",
		  "    },",
		  "  },",
		  "  security: [{ Bearer: [] }],",
		  "});",
		  "",
		  "const app = new OpenAPIHono();",
		  "",
		  "app.use(route.getRoutingPath());",
		  "",
		  "export type EndpointType = typeof ep;",
		  "export const ep = app.openapi(route, async (c) => {",
		  "",
		  "  return c.json({});",
		  "});",
		  "",
		  "export default app;",
		  ""
		],
		"description": ""
	  },
	  "hono_router-get": {
		"prefix": "hnrg",
		"body": [
		  "import { useAuth } from \"@/src/middlewares/auth\";",
		  "import { OpenAPIHono, createRoute, z } from \"@hono/zod-openapi\";",
		  "",
		  "export const zRes = z.object({});",
		  "",
		  "const route = createRoute({",
		  "  path: \"\",",
		  "  tags: [\"\"],",
		  "  method: \"get\",",
		  "  summary: '',",
		  "  description: '',",
		  "  responses: {",
		  "    200: {",
		  "      content: {",
		  "        \"application/json\": {",
		  "          schema: zRes,",
		  "        },",
		  "      },",
		  "      description: \"\",",
		  "    },",
		  "  },",
		  "  security: [{ Bearer: [] }],",
		  "});",
		  "",
		  "const app = new OpenAPIHono();",
		  "",
		  "app.use(route.getRoutingPath(), useAuth());",
		  "",
		  "export type EndpointType = typeof ep;",
		  "export const ep = app.openapi(route, async (c) => {",
		  "  return c.json({});",
		  "});",
		  "",
		  "export default app;",
		  ""
		],
		"description": ""
	  },
	  "hono-middleware": {
		"prefix": "hnmd",
		"body": [
		  "import { createMiddleware } from 'hono/factory';",
		  "",
		  "export const use${1:Middleware} = () => {",
		  "  return createMiddleware(async (c, next) => {",
		  "    await next();",
		  "  });",
		  "};",
		  ""
		],
		"description": "hono-middleware"
	  }
}
